name: dmkdump-build

on:
  workflow_dispatch:
    inputs:
      make_build_target:
        description: Make build target
        required: false
        type: string
        default: "release"

  workflow_call:
    inputs:
      make_build_target:
        description: Make build target
        required: false
        type: string
        default: "release"
    outputs:
      package_name:
        description: Name of package
        value: ${{ jobs.build_all.outputs.package_name }}
      package_version:
        description: Build version
        value: ${{ jobs.build_all.outputs.package_version }}
      build_artifacts_names:
        description: Build artifacts names
        value: ${{ jobs.build_all.outputs.build_artifacts_names }}


jobs:
  build_name_version:
    name: Determine Build Package Name and Version
    runs-on: ubuntu-latest
    outputs:
      package_name: ${{ steps.package_name.outputs.package_name }}
      package_version: ${{ steps.package_version.outputs.package_version }}
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - id: package_name
        run: echo "package_name=$(make show_package)" >> $GITHUB_OUTPUT

      - id: package_version
        run: echo "package_version=$(make show_version)" >> $GITHUB_OUTPUT


  build_linux_x86_64:
    name: Build Linux for x86_64
    runs-on: ubuntu-latest
    needs: build_name_version
    outputs:
      build_artifacts_name: ${{ steps.build_artifacts_name.outputs.build_artifacts_name }}
    env:
      make_build_target: ${{ inputs.make_build_target }}
      package: ${{ needs.build_name_version.outputs.package_name }}
      version: ${{ needs.build_name_version.outputs.package_version }}
      target_platform_name: linux
      target_platform: LINUX_X86_64
      target_arch: x86_64
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Build target
        run: make -f Makefile.cross "BUILDS=${target_platform}" "${make_build_target}"

      - id: target_platform_full_name
        run: echo "target_platform_full_name=${target_platform_name}.${target_arch}" >> $GITHUB_ENV

      - id: build_artifacts_name
        run: echo "build_artifacts_name=${package}-${version}-${target_platform_full_name}-build-artifacts" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build_artifacts_name.outputs.build_artifacts_name }}
          path: build.${{ env.target_platform_full_name }}/${{ env.package }}-${{ env.version }}-${{ env.target_platform_full_name }}.tar.gz
          if-no-files-found: error
          retention-days: 2


  build_linux_armv7l:
    name: Build Linux for ARM 32-bit
    # Older ubuntu-20.04 needed for cross packages compatible with
    # Raspberry Pi OS based on Debian 11.
    runs-on: ubuntu-20.04
    container: docker.io/qbarnes/ubuntu2004-crossbuild-arm32
    needs: build_name_version
    outputs:
      build_artifacts_name: ${{ steps.build_artifacts_name.outputs.build_artifacts_name }}
    env:
      make_build_target: ${{ inputs.make_build_target }}
      package: ${{ needs.build_name_version.outputs.package_name }}
      version: ${{ needs.build_name_version.outputs.package_version }}
      target_platform_name: linux
      target_platform: LINUX_ARM32
      target_arch: armv7l
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Build target
        run: make -f Makefile.cross "BUILDS=${target_platform}" "${make_build_target}"

      - id: target_platform_full_name
        run: echo "target_platform_full_name=${target_platform_name}.${target_arch}" >> $GITHUB_ENV

      - id: build_artifacts_name
        run: echo "build_artifacts_name=${package}-${version}-${target_platform_full_name}-build-artifacts" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build_artifacts_name.outputs.build_artifacts_name }}
          path: build.${{ env.target_platform_full_name }}/${{ env.package }}-${{ env.version }}-${{ env.target_platform_full_name }}.tar.gz
          if-no-files-found: error
          retention-days: 2


  build_linux_aarch64:
    name: Build Linux for ARM 64-bit
    # Older ubuntu-20.04 needed for cross packages compatible with
    # Raspberry Pi OS based on Debian 11.
    runs-on: ubuntu-20.04
    container: docker.io/qbarnes/ubuntu2004-crossbuild-aarch64
    needs: build_name_version
    outputs:
      build_artifacts_name: ${{ steps.build_artifacts_name.outputs.build_artifacts_name }}
    env:
      make_build_target: ${{ inputs.make_build_target }}
      package: ${{ needs.build_name_version.outputs.package_name }}
      version: ${{ needs.build_name_version.outputs.package_version }}
      target_platform_name: linux
      target_platform: LINUX_ARM64
      target_arch: aarch64
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Build target
        run: make -f Makefile.cross "BUILDS=${target_platform}" "${make_build_target}"

      - id: target_platform_full_name
        run: echo "target_platform_full_name=${target_platform_name}.${target_arch}" >> $GITHUB_ENV

      - id: build_artifacts_name
        run: echo "build_artifacts_name=${package}-${version}-${target_platform_full_name}-build-artifacts" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build_artifacts_name.outputs.build_artifacts_name }}
          path: build.${{ env.target_platform_full_name }}/${{ env.package }}-${{ env.version }}-${{ env.target_platform_full_name }}.tar.gz
          if-no-files-found: error
          retention-days: 2


  build_msdos:
    name: Build MS-DOS
    runs-on: ubuntu-latest
    needs: build_name_version
    outputs:
      build_artifacts_name: ${{ steps.build_artifacts_name.outputs.build_artifacts_name }}
    env:
      make_build_target: ${{ inputs.make_build_target }}
      package: ${{ needs.build_name_version.outputs.package_name }}
      version: ${{ needs.build_name_version.outputs.package_version }}
      target_platform_name: msdos
      target_platform: MSDOS
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Prep cross-compilers and PATH
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64
          wget -nv https://github.com/andrewwutw/build-djgpp/releases/download/v3.1/djgpp-linux64-gcc1020.tar.bz2
          tar -xf djgpp-linux64-gcc1020.tar.bz2
          echo "$PWD/djgpp/bin" >> $GITHUB_PATH

      - name: Build target
        run: make -f Makefile.cross "BUILDS=${target_platform}" "${make_build_target}"

      - id: target_platform_full_name
        run: echo "target_platform_full_name=${target_platform_name}" >> $GITHUB_ENV

      - id: build_artifacts_name
        run: echo "build_artifacts_name=${package}-${version}-${target_platform_full_name}-build-artifacts" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build_artifacts_name.outputs.build_artifacts_name }}
          path: build.${{ env.target_platform_full_name }}/${{ env.package }}-${{ env.version }}-${{ env.target_platform_full_name }}.tar.gz
          if-no-files-found: error
          retention-days: 2


  build_mswin32:
    name: Build Microsoft Windows 32-bit
    runs-on: ubuntu-latest
    needs: build_name_version
    outputs:
      build_artifacts_name: ${{ steps.build_artifacts_name.outputs.build_artifacts_name }}
    env:
      make_build_target: ${{ inputs.make_build_target }}
      package: ${{ needs.build_name_version.outputs.package_name }}
      version: ${{ needs.build_name_version.outputs.package_version }}
      target_platform_name: win32
      target_platform: MSWIN32
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Prep cross-compiler
        run: |
          sudo apt-get update
          # mingw-64 includes 32 on .deb distros
          sudo apt-get install -y mingw-w64

      - name: Build target
        run: make -f Makefile.cross "BUILDS=${target_platform}" "${make_build_target}"

      - id: target_platform_full_name
        run: echo "target_platform_full_name=${target_platform_name}" >> $GITHUB_ENV

      - id: build_artifacts_name
        run: echo "build_artifacts_name=${package}-${version}-${target_platform_full_name}-build-artifacts" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build_artifacts_name.outputs.build_artifacts_name }}
          path: build.${{ env.target_platform_full_name }}/${{ env.package }}-${{ env.version }}-${{ env.target_platform_full_name }}.tar.gz
          if-no-files-found: error
          retention-days: 2


  build_mswin64:
    name: Build Microsoft Windows 64-bit
    runs-on: ubuntu-latest
    needs: build_name_version
    outputs:
      build_artifacts_name: ${{ steps.build_artifacts_name.outputs.build_artifacts_name }}
    env:
      make_build_target: ${{ inputs.make_build_target }}
      package: ${{ needs.build_name_version.outputs.package_name }}
      version: ${{ needs.build_name_version.outputs.package_version }}
      target_platform_name: win64
      target_platform: MSWIN64
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true

      - name: Prep cross-compiler
        run: |
          sudo apt-get update
          sudo apt-get install -y mingw-w64

      - name: Build target
        run: make -f Makefile.cross "BUILDS=${target_platform}" "${make_build_target}"

      - id: target_platform_full_name
        run: echo "target_platform_full_name=${target_platform_name}" >> $GITHUB_ENV

      - id: build_artifacts_name
        run: echo "build_artifacts_name=${package}-${version}-${target_platform_full_name}-build-artifacts" >> $GITHUB_OUTPUT

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.build_artifacts_name.outputs.build_artifacts_name }}
          path: build.${{ env.target_platform_full_name }}/${{ env.package }}-${{ env.version }}-${{ env.target_platform_full_name }}.tar.gz
          if-no-files-found: error
          retention-days: 2


  build_all:
    name: Build All
    runs-on: ubuntu-latest
    needs: [build_name_version, build_linux_x86_64, build_linux_armv7l, build_linux_aarch64, build_msdos, build_mswin32, build_mswin64]
    outputs:
      package_name: ${{ needs.build_name_version.outputs.package_name }}
      version: ${{ needs.build_name_version.outputs.package_version }}
      build_artifacts_names: |
        ${{ needs.build_linux_x86_64.build_artifacts_name.outputs.build_artifacts_name }}
        ${{ needs.build_linux_aarch64.build_artifacts_name.outputs.build_artifacts_name }}
        ${{ needs.build_linux_armv7l.build_artifacts_name.outputs.build_artifacts_name }}
        ${{ needs.build_msdos.build_artifacts_name.outputs.build_artifacts_name }}
        ${{ needs.build_mswin32.build_artifacts_name.outputs.build_artifacts_name }}
        ${{ needs.build_mswin64.build_artifacts_name.outputs.build_artifacts_name }}
    steps:
      - name: Build All Done
        run: echo 'Build All' done!
